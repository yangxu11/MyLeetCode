Problem:

Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

Solution:

执行用时 : 11 ms, 在Two Sum的Java提交中击败了73.97% 的用户
内存消耗 : 41.5 MB, 在Two Sum的Java提交中击败了0.99% 的用户

//建立hashMap存储这个数与target的差和下标，如果接下来出现了这个差,则得出结果

public int[] twoSum(int[] nums, int target) {
       Map<Integer,Integer> map = new HashMap<>();
      for(int i=0 ; i<nums.length ; i++){
          if(map.containsKey(nums[i])){
              return new int[] { map.get(nums[i]), i };
          }
          map.put(target-nums[i],i);
      }
      throw new IllegalArgumentException("No two sum solution");
}
