Problem:
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


Solution:

执行用时 : 53 ms, 在Add Two Numbers的Java提交中击败了68.61% 的用户
内存消耗 : 57.3 MB, 在Add Two Numbers的Java提交中击败了0.95% 的用户

//链表的遍历
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0);
        ListNode res = head;
        int up=0;
        while(l1!=null && l2!=null){
           int num = l1.val + l2.val + up;
            head.next = new ListNode(num%10);
            up =num/10;
            head = head.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        while(l1!=null){
           int num = l1.val + up;
           head.next = new ListNode(num%10);
            up =num/10;
            head = head.next;
            l1 = l1.next; 
        }
        while(l2!=null){
           int num = l2.val + up;
            head.next = new ListNode(num%10);
            up =num/10;
            head = head.next;
            l2 = l2.next; 
        }
        if(up==1){
            head.next = new ListNode(up);
        }
        return res.next;
    }
