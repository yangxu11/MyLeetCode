Problem:
Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.



Solution:

//最优解 
public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        int[] index = new int[128]; // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            i = Math.max(index[s.charAt(j)], i);
            ans = Math.max(ans, j - i + 1);
            index[s.charAt(j)] = j + 1;
        }
        return ans;
    }



执行用时 : 51 ms, 在Longest Substring Without Repeating Characters的Java提交中击败了69.67% 的用户
内存消耗 : 49.5 MB, 在Longest Substring Without Repeating Characters的Java提交中击败了12.52% 的用户

//滑动窗口
public int lengthOfLongestSubstring(String s) {
       if(s.length()<=1) return s.length();
        int start = 0;
        int end = 1;
        int res = 0;
        while(end<s.length()){
            for(int i=start ; i<end ; i++){
                if(s.charAt(i)==s.charAt(end)){
                    res = Math.max(end-i,res);
                    start = i+1;
                    break;
                }
            }
            res = Math.max(end-start+1,res);
            end++;
        }
        return res;
}
